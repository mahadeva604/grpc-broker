// Code generated by MockGen. DO NOT EDIT.
// Source: topic.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/mahadeva604/grpc-broker/internal/domain/models"
)

// MockTopic is a mock of Topic interface.
type MockTopic struct {
	ctrl     *gomock.Controller
	recorder *MockTopicMockRecorder
}

// MockTopicMockRecorder is the mock recorder for MockTopic.
type MockTopicMockRecorder struct {
	mock *MockTopic
}

// NewMockTopic creates a new mock instance.
func NewMockTopic(ctrl *gomock.Controller) *MockTopic {
	mock := &MockTopic{ctrl: ctrl}
	mock.recorder = &MockTopicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopic) EXPECT() *MockTopicMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockTopic) Publish(msg models.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", msg)
}

// Publish indicates an expected call of Publish.
func (mr *MockTopicMockRecorder) Publish(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockTopic)(nil).Publish), msg)
}

// Subscribe mocks base method.
func (m *MockTopic) Subscribe(ack, done <-chan struct{}) <-chan *models.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ack, done)
	ret0, _ := ret[0].(<-chan *models.Message)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockTopicMockRecorder) Subscribe(ack, done interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockTopic)(nil).Subscribe), ack, done)
}

// TrySubscribe mocks base method.
func (m *MockTopic) TrySubscribe(ack, done <-chan struct{}) (<-chan *models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrySubscribe", ack, done)
	ret0, _ := ret[0].(<-chan *models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrySubscribe indicates an expected call of TrySubscribe.
func (mr *MockTopicMockRecorder) TrySubscribe(ack, done interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrySubscribe", reflect.TypeOf((*MockTopic)(nil).TrySubscribe), ack, done)
}
